import { type NextRequest, NextResponse } from "next/server"
import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { 
      orderId, 
      customerInfo, 
      items, 
      totalAmount, 
      originalAmount,
      discount,
      promoCode
    } = body

    // R√©cup√©rer les d√©tails de la commande
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
    })

    if (!order) {
      return NextResponse.json({ error: "Commande non trouv√©e" }, { status: 404 })
    }

    // Pr√©parer le message WhatsApp
    const whatsappMessage = `
üéâ *Commande confirm√©e !*

Bonjour ${customerInfo.firstName},

Votre commande #${orderId.slice(-8)} a √©t√© enregistr√©e avec succ√®s.

üì¶ *Articles command√©s:*
${items.map((item: any) => `‚Ä¢ ${item.name} x${item.quantity} - ‚Ç¨${(item.price * item.quantity).toFixed(2)}`).join('\n')}

üí∞ *D√©tails financiers:*
‚Ä¢ Sous-total: ‚Ç¨${originalAmount.toFixed(2)}
${discount > 0 ? `‚Ä¢ R√©duction (${promoCode}): -‚Ç¨${discount.toFixed(2)}` : ''}
‚Ä¢ Total: ‚Ç¨${totalAmount.toFixed(2)}

üöö *Adresse de livraison:*
${customerInfo.address}
${customerInfo.postalCode} ${customerInfo.city}

üìû *Contact:*
Email: ${customerInfo.email}
T√©l√©phone: ${customerInfo.phone}

Nous vous tiendrons inform√© de l'avancement de votre commande.

Merci pour votre confiance !
    `.trim()

    // Pr√©parer l'email
    const emailSubject = `Confirmation de commande #${orderId.slice(-8)}`
    const emailBody = `
Bonjour ${customerInfo.firstName},

Votre commande a √©t√© enregistr√©e avec succ√®s.

D√©tails de la commande:
- Num√©ro: #${orderId.slice(-8)}
- Date: ${new Date().toLocaleDateString('fr-FR')}
- Total: ‚Ç¨${totalAmount.toFixed(2)}

Articles command√©s:
${items.map((item: any) => `- ${item.name} x${item.quantity} - ‚Ç¨${(item.price * item.quantity).toFixed(2)}`).join('\n')}

Adresse de livraison:
${customerInfo.address}
${customerInfo.postalCode} ${customerInfo.city}

Nous vous tiendrons inform√© de l'avancement de votre commande.

Cordialement,
L'√©quipe
    `.trim()

    // Ici vous pouvez int√©grer votre service d'email (SendGrid, Mailgun, etc.)
    console.log("Email √† envoyer:", {
      to: customerInfo.email,
      subject: emailSubject,
      body: emailBody,
    })

    // Ici vous pouvez int√©grer l'API WhatsApp Business
    console.log("Message WhatsApp √† envoyer:", {
      to: customerInfo.phone,
      message: whatsappMessage,
    })

    // Pour l'instant, on retourne un succ√®s
    // Dans un vrai projet, vous feriez les appels API ici
    return NextResponse.json({ 
      success: true, 
      message: "Notifications envoy√©es avec succ√®s",
      whatsappSent: true,
      emailSent: true
    })

  } catch (error) {
    console.error("Erreur lors de l'envoi des notifications:", error)
    return NextResponse.json({ 
      error: "Erreur lors de l'envoi des notifications" 
    }, { status: 500 })
  }
}
