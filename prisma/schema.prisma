// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CUSTOMER)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  vendor        Vendor?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Vendor {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName   String
  description String?
  logo        String?
  phone       String?
  address     String?
  isActive    Boolean   @default(true)
  products    Product[]
  orders      Order[]   @relation("VendorOrders")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  images      String[] @default([])
  category    String
  inStock     Boolean  @default(true)
  rating      Float    @default(0)
  reviews     Int      @default(0)
  brand       String?
  sku         String?
  weight      Float?
  dimensions  String?
  tags        String[] @default([])
  quantity    Int      @default(0)
  views       Int      @default(0)
  vendorId    String?
  vendor      Vendor?  @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendorId  String?
  vendor    Vendor?     @relation("VendorOrders", fields: [vendorId], references: [id], onDelete: SetNull)
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  shippingAddress String?
  paymentMethod   String?
  trackingNumber  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model Promotion {
  id              String        @id @default(cuid())
  name            String
  description     String?
  type            PromotionType
  value           Float
  code            String?       @unique
  minOrderAmount  Float?
  maxDiscount     Float?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean       @default(true)
  usageLimit      Int?
  usageCount      Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
